{"version":3,"sources":["components/searchbar.js","components/randobutton.js","components/searchlist.js","components/searchresults.js","components/wikiheader.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","term","termSubmit","bind","assertThisInitialized","onInputChange","react_default","a","createElement","id","onSubmit","className","placeholder","name","value","onChange","type","event","setState","target","e","preventDefault","console","log","wikiSearch","Component","RandoButton","href","SearchList","_ref","Link","article","pageid","index_m_default","url","size","SearchResults","Results","articles","map","searchlist","key","WikiHeader","App","loading","_this2","axios","get","then","response","data","query","allpages","catch","err","wikiheader","searchbar","randobutton","searchresults","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.15df21c9.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\n\r\nclass SearchBar extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state={\r\n      term: ''\r\n    };\r\n    this.termSubmit = this.termSubmit.bind(this);\r\n    this.onInputChange = this.onInputChange.bind(this);\r\n  }\r\n  render(){\r\n    return(\r\n      <form id=\"search-bar\" onSubmit={this.termSubmit}>\r\n        <input className=\"bar useFontAwesomeFamily\" placeholder=\"Enter Search Term\" name=\"\" value={this.state.term} onChange={this.onInputChange}/>\r\n        <button type=\"submit\" className=\"btn\"><i className=\"fa fa-search\"></i></button>\r\n        {/* <input type=\"submit\" id=\"schbtn\" className=\"btn\" value=\"Go!\"/> */}\r\n      </form>\r\n    );\r\n  }\r\n\r\n  onInputChange(event){\r\n    // sets the state to the current search term\r\n    this.setState({term: event.target.value});\r\n    // pulls qwicksearch from searchbar on app.js\r\n    // this.props.onSearch(this.state.term);\r\n    \r\n  }\r\n\r\n  termSubmit(e){\r\n    e.preventDefault();\r\n    console.log(this.state.term + \" Was submitted\");\r\n    this.props.wikiSearch(this.state.term);\r\n    this.setState({term: ''});\r\n  }\r\n\r\n}\r\n\r\nexport default SearchBar;\r\n","import React from 'react';\r\n\r\nconst RandoButton = (props) => {\r\n  return(\r\n    <div className=\"center\"><a href=\"https://en.wikipedia.org/wiki/Special:Random\" target=\"blank\" className=\"btn\">Random Article</a></div>\r\n  );\r\n};\r\n\r\nexport default RandoButton;\r\n","import React from 'react';\r\nimport MicrolinkCard from '@microlink/react';\r\nconst SearchList = ({article}) => {\r\n  const Link = 'http://en.wikipedia.org/?curid=' + article.pageid;\r\n  // Places a Microlink card inside a column and passes the url in using the Link constant\r\n  return(\r\n      <div className=\"column\">\r\n      <MicrolinkCard\r\n        url={Link}\r\n        size='large'\r\n      \r\n      \r\n      />\r\n      \r\n      </div>\r\n  );\r\n}\r\n\r\nexport default SearchList;\r\n","import React from 'react';\r\nimport SearchListItem from './searchlist'\r\n\r\nconst SearchResults = (props) =>{\r\n  const Results = props.articles.map(article => {\r\n    return(\r\n      <SearchListItem key={article.pageid} article={article} />\r\n    );\r\n  });\r\n  return  (\r\n    <div className=\"container\">\r\n    <ul className=\"columns\">\r\n      {Results}\r\n    </ul>\r\n  </div>\r\n  );\r\n};\r\n\r\nexport default SearchResults;\r\n","import React from 'react';\r\n\r\nconst WikiHeader = () => {\r\n    return(\r\n        <header>\r\n            <h1 className=\"header\"><span><i className=\"fab fa-wikipedia-w\"></i></span>iki<span id=\"title\">Viewer</span></h1>\r\n            <h4 className=\"mini-heading\">Wikipedia article search and link surfing tool</h4>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default WikiHeader;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport axios from 'axios';\r\nimport SearchBar from './components/searchbar'\r\nimport RandoButton from './components/randobutton'\r\nimport SearchResults from './components/searchresults';\r\nimport 'bulma/css/bulma.css';\r\nimport WikiHeader from './components/wikiheader';\r\n\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state={\r\n      articles: [],\r\n      term: null,\r\n      loading: false\r\n    }\r\n    // binding wikiSearch allows it to set the state of articles when updated through searchbar\r\n    this.wikiSearch = this.wikiSearch.bind(this);\r\n  }\r\n// componentWillMount(){\r\n//   this.wikiSearch('Wikipedia');\r\n// }\r\n// Function that takes a serch tearm for an arguement and passes it to an axios get request\r\nwikiSearch(term){\r\n  axios.get('https://cors-anywhere.herokuapp.com/https://en.wikipedia.org/w/api.php?action=query&titles='+ term +'&prop=revisions&rvlimit=10&rvprop=content&list=allpages&apfrom='+ term +'&aplimit=3&alprop=ids|title&format=json')\r\n    .then((response) => {\r\n      console.log(response)\r\n      this.setState({articles:response.data.query.allpages}, function(){\r\n        console.log(this.state);\r\n      });\r\n    })\r\n    .catch((err) =>{\r\n      console.log(err)\r\n    });\r\n}\r\n\r\n\r\n\r\n  render() {\r\n    // renders the completed app\r\n    return (\r\n      <div className=\"App\">\r\n      <WikiHeader/>\r\n      <SearchBar wikiSearch={this.wikiSearch}/>\r\n      <RandoButton />\r\n      <SearchResults articles={this.state.articles}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}